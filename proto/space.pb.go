// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/space.proto

package riseandfall

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Space struct {
	Planets map[uint32]*Planet `protobuf:"bytes,1,rep,name=planets" json:"planets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ships   map[uint64]*Ship   `protobuf:"bytes,2,rep,name=ships" json:"ships,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Empires map[uint32]*Empire `protobuf:"bytes,3,rep,name=empires" json:"empires,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Width   uint32             `protobuf:"varint,4,opt,name=width" json:"width,omitempty"`
	Height  uint32             `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
}

func (m *Space) Reset()                    { *m = Space{} }
func (m *Space) String() string            { return proto.CompactTextString(m) }
func (*Space) ProtoMessage()               {}
func (*Space) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Space) GetPlanets() map[uint32]*Planet {
	if m != nil {
		return m.Planets
	}
	return nil
}

func (m *Space) GetShips() map[uint64]*Ship {
	if m != nil {
		return m.Ships
	}
	return nil
}

func (m *Space) GetEmpires() map[uint32]*Empire {
	if m != nil {
		return m.Empires
	}
	return nil
}

func (m *Space) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Space) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Planet struct {
	Name      string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id        uint32          `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	PosX      uint32          `protobuf:"varint,3,opt,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY      uint32          `protobuf:"varint,4,opt,name=pos_y,json=posY" json:"pos_y,omitempty"`
	Orbiting  map[uint64]bool `protobuf:"bytes,5,rep,name=orbiting" json:"orbiting,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Control   float32         `protobuf:"fixed32,6,opt,name=control" json:"control,omitempty"`
	Empire    uint32          `protobuf:"varint,7,opt,name=empire" json:"empire,omitempty"`
	Connected []uint32        `protobuf:"varint,8,rep,packed,name=connected" json:"connected,omitempty"`
}

func (m *Planet) Reset()                    { *m = Planet{} }
func (m *Planet) String() string            { return proto.CompactTextString(m) }
func (*Planet) ProtoMessage()               {}
func (*Planet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Planet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Planet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Planet) GetPosX() uint32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *Planet) GetPosY() uint32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *Planet) GetOrbiting() map[uint64]bool {
	if m != nil {
		return m.Orbiting
	}
	return nil
}

func (m *Planet) GetControl() float32 {
	if m != nil {
		return m.Control
	}
	return 0
}

func (m *Planet) GetEmpire() uint32 {
	if m != nil {
		return m.Empire
	}
	return 0
}

func (m *Planet) GetConnected() []uint32 {
	if m != nil {
		return m.Connected
	}
	return nil
}

type Ship struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Types that are valid to be assigned to Position:
	//	*Ship_Orbiting
	//	*Ship_Moving
	Position isShip_Position `protobuf_oneof:"position"`
	Empire   uint32          `protobuf:"varint,4,opt,name=empire" json:"empire,omitempty"`
}

func (m *Ship) Reset()                    { *m = Ship{} }
func (m *Ship) String() string            { return proto.CompactTextString(m) }
func (*Ship) ProtoMessage()               {}
func (*Ship) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type isShip_Position interface {
	isShip_Position()
}

type Ship_Orbiting struct {
	Orbiting uint32 `protobuf:"varint,2,opt,name=orbiting,oneof"`
}
type Ship_Moving struct {
	Moving *Movement `protobuf:"bytes,3,opt,name=moving,oneof"`
}

func (*Ship_Orbiting) isShip_Position() {}
func (*Ship_Moving) isShip_Position()   {}

func (m *Ship) GetPosition() isShip_Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Ship) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Ship) GetOrbiting() uint32 {
	if x, ok := m.GetPosition().(*Ship_Orbiting); ok {
		return x.Orbiting
	}
	return 0
}

func (m *Ship) GetMoving() *Movement {
	if x, ok := m.GetPosition().(*Ship_Moving); ok {
		return x.Moving
	}
	return nil
}

func (m *Ship) GetEmpire() uint32 {
	if m != nil {
		return m.Empire
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Ship) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Ship_OneofMarshaler, _Ship_OneofUnmarshaler, _Ship_OneofSizer, []interface{}{
		(*Ship_Orbiting)(nil),
		(*Ship_Moving)(nil),
	}
}

func _Ship_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Ship)
	// position
	switch x := m.Position.(type) {
	case *Ship_Orbiting:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Orbiting))
	case *Ship_Moving:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Moving); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Ship.Position has unexpected type %T", x)
	}
	return nil
}

func _Ship_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Ship)
	switch tag {
	case 2: // position.orbiting
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Position = &Ship_Orbiting{uint32(x)}
		return true, err
	case 3: // position.moving
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Movement)
		err := b.DecodeMessage(msg)
		m.Position = &Ship_Moving{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Ship_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Ship)
	// position
	switch x := m.Position.(type) {
	case *Ship_Orbiting:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Orbiting))
	case *Ship_Moving:
		s := proto.Size(x.Moving)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Movement struct {
	Start    uint32  `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End      uint32  `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Traveled float64 `protobuf:"fixed64,3,opt,name=traveled" json:"traveled,omitempty"`
}

func (m *Movement) Reset()                    { *m = Movement{} }
func (m *Movement) String() string            { return proto.CompactTextString(m) }
func (*Movement) ProtoMessage()               {}
func (*Movement) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Movement) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Movement) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Movement) GetTraveled() float64 {
	if m != nil {
		return m.Traveled
	}
	return 0
}

type Empire struct {
	Id      uint32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Passive bool            `protobuf:"varint,2,opt,name=passive" json:"passive,omitempty"`
	Ships   map[uint64]bool `protobuf:"bytes,3,rep,name=ships" json:"ships,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Planets map[uint32]bool `protobuf:"bytes,4,rep,name=planets" json:"planets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Color   string          `protobuf:"bytes,5,opt,name=color" json:"color,omitempty"`
}

func (m *Empire) Reset()                    { *m = Empire{} }
func (m *Empire) String() string            { return proto.CompactTextString(m) }
func (*Empire) ProtoMessage()               {}
func (*Empire) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Empire) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Empire) GetPassive() bool {
	if m != nil {
		return m.Passive
	}
	return false
}

func (m *Empire) GetShips() map[uint64]bool {
	if m != nil {
		return m.Ships
	}
	return nil
}

func (m *Empire) GetPlanets() map[uint32]bool {
	if m != nil {
		return m.Planets
	}
	return nil
}

func (m *Empire) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func init() {
	proto.RegisterType((*Space)(nil), "riseandfall.Space")
	proto.RegisterType((*Planet)(nil), "riseandfall.Planet")
	proto.RegisterType((*Ship)(nil), "riseandfall.Ship")
	proto.RegisterType((*Movement)(nil), "riseandfall.Movement")
	proto.RegisterType((*Empire)(nil), "riseandfall.Empire")
}

func init() { proto.RegisterFile("proto/space.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0x5e, 0xfe, 0x36, 0x3d, 0x5d, 0x7f, 0xfa, 0xcd, 0x2b, 0xc8, 0x8a, 0x06, 0x84, 0xde, 0x50,
	0x6e, 0x3a, 0x69, 0xe3, 0x62, 0x14, 0x71, 0x83, 0x34, 0x69, 0x12, 0x82, 0xa2, 0xec, 0x06, 0xae,
	0x50, 0xd6, 0x98, 0xd5, 0x22, 0xb5, 0xad, 0xd8, 0x14, 0xfa, 0x08, 0xbc, 0x06, 0x4f, 0xc0, 0x9b,
	0xf0, 0x4a, 0xc8, 0x76, 0xb2, 0xba, 0x52, 0xaa, 0x89, 0x3b, 0x9f, 0x93, 0xef, 0x3b, 0x3e, 0xe7,
	0xfb, 0x72, 0x0c, 0x47, 0xa2, 0xe6, 0x8a, 0x9f, 0x4a, 0x51, 0x2c, 0xc8, 0xd4, 0x9c, 0xd1, 0xa0,
	0xa6, 0x92, 0x14, 0xac, 0xfc, 0x52, 0x54, 0xd5, 0xf8, 0x4f, 0x00, 0xd1, 0xb5, 0xfe, 0x88, 0x5e,
	0x42, 0x4f, 0x54, 0x05, 0x23, 0x4a, 0x62, 0x2f, 0x0b, 0x26, 0x83, 0xb3, 0x27, 0x53, 0x07, 0x38,
	0x35, 0xa0, 0xe9, 0x07, 0x8b, 0xb8, 0x64, 0xaa, 0xde, 0xe4, 0x2d, 0x1e, 0x9d, 0x43, 0x24, 0x97,
	0x54, 0x48, 0xec, 0x1b, 0xe2, 0xa3, 0x0e, 0xe2, 0xb5, 0xfe, 0x6e, 0x69, 0x16, 0xab, 0xef, 0x23,
	0x2b, 0x41, 0x6b, 0x22, 0x71, 0xb0, 0xf7, 0xbe, 0x4b, 0x8b, 0x68, 0xee, 0x6b, 0xf0, 0x68, 0x04,
	0xd1, 0x77, 0x5a, 0xaa, 0x25, 0x0e, 0x33, 0x6f, 0x32, 0xcc, 0x6d, 0x80, 0x1e, 0x42, 0xbc, 0x24,
	0xf4, 0x76, 0xa9, 0x70, 0x64, 0xd2, 0x4d, 0x94, 0xce, 0xe1, 0xd0, 0x6d, 0x1b, 0xfd, 0x0f, 0xc1,
	0x57, 0xb2, 0xc1, 0x9e, 0x01, 0xe9, 0x23, 0x7a, 0x0e, 0xd1, 0xba, 0xa8, 0xbe, 0x11, 0xec, 0x67,
	0xde, 0x64, 0x70, 0x76, 0xbc, 0xd3, 0x88, 0xe5, 0xe6, 0x16, 0x31, 0xf3, 0x2f, 0xbc, 0xf4, 0x2d,
	0xc0, 0x76, 0x1c, 0xb7, 0x5c, 0x68, 0xcb, 0x3d, 0xdb, 0x2d, 0x77, 0xb4, 0x3b, 0xd7, 0x92, 0x0a,
	0xb7, 0xd8, 0x1c, 0x0e, 0xdd, 0x21, 0xff, 0xb5, 0x3b, 0xcb, 0x75, 0x0a, 0x8e, 0x7f, 0xf9, 0x10,
	0xdb, 0x9e, 0x11, 0x82, 0x90, 0x15, 0x2b, 0x62, 0x8a, 0xf5, 0x73, 0x73, 0x46, 0xff, 0x81, 0x4f,
	0x4b, 0x53, 0x6a, 0x98, 0xfb, 0xb4, 0x44, 0xc7, 0x10, 0x09, 0x2e, 0x3f, 0xff, 0xc0, 0x81, 0x49,
	0x85, 0x82, 0xcb, 0x8f, 0x6d, 0x72, 0xd3, 0x08, 0xac, 0x93, 0x9f, 0xd0, 0x6b, 0x48, 0x78, 0x7d,
	0x43, 0x15, 0x65, 0xb7, 0x38, 0x32, 0x8e, 0x3d, 0xed, 0x10, 0x6a, 0x3a, 0x6f, 0x30, 0xd6, 0xb3,
	0x3b, 0x0a, 0xc2, 0xd0, 0x5b, 0x70, 0xa6, 0x6a, 0x5e, 0xe1, 0x38, 0xf3, 0x26, 0x7e, 0xde, 0x86,
	0xda, 0x38, 0xeb, 0x2c, 0xee, 0x59, 0xe3, 0x6c, 0x84, 0x4e, 0xa0, 0xbf, 0xe0, 0x8c, 0x91, 0x85,
	0x22, 0x25, 0x4e, 0xb2, 0x60, 0x32, 0xcc, 0xb7, 0x89, 0xf4, 0x15, 0x0c, 0x77, 0xae, 0xea, 0x30,
	0x62, 0xe4, 0x2a, 0x97, 0xb8, 0x22, 0xfd, 0xf4, 0x20, 0xd4, 0x4e, 0x34, 0x72, 0x58, 0x8e, 0x96,
	0xe3, 0xc4, 0x19, 0xd2, 0x88, 0x74, 0x75, 0xe0, 0xcc, 0x70, 0x0a, 0xf1, 0x8a, 0xaf, 0xf5, 0xb7,
	0xc0, 0x78, 0xf1, 0x60, 0x47, 0x80, 0x77, 0x7c, 0x4d, 0x56, 0x84, 0xa9, 0xab, 0x83, 0xbc, 0x81,
	0x39, 0xa3, 0x85, 0xee, 0x68, 0x6f, 0x00, 0x12, 0xc1, 0x25, 0x55, 0x94, 0xb3, 0xf1, 0x7b, 0x48,
	0x5a, 0xa6, 0xee, 0x58, 0xaa, 0xa2, 0x56, 0x8d, 0xff, 0x36, 0xd0, 0x93, 0x11, 0xd6, 0x9a, 0xa6,
	0x8f, 0x28, 0x85, 0x44, 0xd5, 0xc5, 0x9a, 0x54, 0xa4, 0x34, 0xad, 0x78, 0xf9, 0x5d, 0x3c, 0xfe,
	0xed, 0x43, 0x6c, 0x7f, 0x0b, 0x67, 0x3a, 0x6b, 0x36, 0x86, 0x9e, 0x28, 0xa4, 0xa4, 0xeb, 0x56,
	0x92, 0x36, 0x44, 0x2f, 0xda, 0x15, 0xb6, 0xbb, 0xf8, 0xb8, 0xe3, 0x27, 0xeb, 0xd8, 0xe1, 0xd9,
	0xf6, 0xcd, 0x08, 0x0d, 0x2f, 0xeb, 0xe2, 0x75, 0x3f, 0x1a, 0x23, 0x88, 0x16, 0xbc, 0xe2, 0xb5,
	0xd9, 0xd6, 0x7e, 0x6e, 0x83, 0xf4, 0xe2, 0x9e, 0xdd, 0xda, 0x6b, 0x69, 0x3a, 0xbb, 0x77, 0xcd,
	0xf7, 0x72, 0x6f, 0x62, 0xf3, 0x32, 0x9e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xc3, 0xa7,
	0xc0, 0x2e, 0x05, 0x00, 0x00,
}
