// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/space.proto

/*
Package riseandfall is a generated protocol buffer package.

It is generated from these files:
	proto/space.proto
	proto/command.proto

It has these top-level messages:
	Space
	Fleet
	Planet
	Empire
	Command
	MovementOrder
*/
package riseandfall

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Space struct {
	Planets map[uint32]*Planet `protobuf:"bytes,1,rep,name=planets" json:"planets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fleets  map[uint32]*Fleet  `protobuf:"bytes,2,rep,name=fleets" json:"fleets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Empires map[uint32]*Empire `protobuf:"bytes,3,rep,name=empires" json:"empires,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Width   uint32             `protobuf:"varint,4,opt,name=width" json:"width,omitempty"`
	Height  uint32             `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Round   uint64             `protobuf:"varint,6,opt,name=round" json:"round,omitempty"`
}

func (m *Space) Reset()                    { *m = Space{} }
func (m *Space) String() string            { return proto.CompactTextString(m) }
func (*Space) ProtoMessage()               {}
func (*Space) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Space) GetPlanets() map[uint32]*Planet {
	if m != nil {
		return m.Planets
	}
	return nil
}

func (m *Space) GetFleets() map[uint32]*Fleet {
	if m != nil {
		return m.Fleets
	}
	return nil
}

func (m *Space) GetEmpires() map[uint32]*Empire {
	if m != nil {
		return m.Empires
	}
	return nil
}

func (m *Space) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Space) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Space) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type Fleet struct {
	Empire uint32 `protobuf:"varint,1,opt,name=empire" json:"empire,omitempty"`
	// cannot use enum as map key
	// 1 ligth 2 heavy 3 ranged
	Ships    map[uint32]uint64 `protobuf:"bytes,2,rep,name=ships" json:"ships,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Position uint32            `protobuf:"varint,3,opt,name=position" json:"position,omitempty"`
}

func (m *Fleet) Reset()                    { *m = Fleet{} }
func (m *Fleet) String() string            { return proto.CompactTextString(m) }
func (*Fleet) ProtoMessage()               {}
func (*Fleet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Fleet) GetEmpire() uint32 {
	if m != nil {
		return m.Empire
	}
	return 0
}

func (m *Fleet) GetShips() map[uint32]uint64 {
	if m != nil {
		return m.Ships
	}
	return nil
}

func (m *Fleet) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type Planet struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	PosX uint32 `protobuf:"varint,3,opt,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY uint32 `protobuf:"varint,4,opt,name=pos_y,json=posY" json:"pos_y,omitempty"`
	// map{empireid: fleetid}
	Fleets     map[uint32]uint32 `protobuf:"bytes,5,rep,name=fleets" json:"fleets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Control    float32           `protobuf:"fixed32,6,opt,name=control" json:"control,omitempty"`
	Empire     uint32            `protobuf:"varint,7,opt,name=empire" json:"empire,omitempty"`
	Connected  []uint32          `protobuf:"varint,8,rep,packed,name=connected" json:"connected,omitempty"`
	Production float32           `protobuf:"fixed32,9,opt,name=production" json:"production,omitempty"`
}

func (m *Planet) Reset()                    { *m = Planet{} }
func (m *Planet) String() string            { return proto.CompactTextString(m) }
func (*Planet) ProtoMessage()               {}
func (*Planet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Planet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Planet) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Planet) GetPosX() uint32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *Planet) GetPosY() uint32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *Planet) GetFleets() map[uint32]uint32 {
	if m != nil {
		return m.Fleets
	}
	return nil
}

func (m *Planet) GetControl() float32 {
	if m != nil {
		return m.Control
	}
	return 0
}

func (m *Planet) GetEmpire() uint32 {
	if m != nil {
		return m.Empire
	}
	return 0
}

func (m *Planet) GetConnected() []uint32 {
	if m != nil {
		return m.Connected
	}
	return nil
}

func (m *Planet) GetProduction() float32 {
	if m != nil {
		return m.Production
	}
	return 0
}

type Empire struct {
	Id      uint32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Passive bool            `protobuf:"varint,2,opt,name=passive" json:"passive,omitempty"`
	Planets map[uint32]bool `protobuf:"bytes,3,rep,name=planets" json:"planets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Fleets  map[uint32]bool `protobuf:"bytes,4,rep,name=fleets" json:"fleets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Color   string          `protobuf:"bytes,5,opt,name=color" json:"color,omitempty"`
}

func (m *Empire) Reset()                    { *m = Empire{} }
func (m *Empire) String() string            { return proto.CompactTextString(m) }
func (*Empire) ProtoMessage()               {}
func (*Empire) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Empire) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Empire) GetPassive() bool {
	if m != nil {
		return m.Passive
	}
	return false
}

func (m *Empire) GetPlanets() map[uint32]bool {
	if m != nil {
		return m.Planets
	}
	return nil
}

func (m *Empire) GetFleets() map[uint32]bool {
	if m != nil {
		return m.Fleets
	}
	return nil
}

func (m *Empire) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func init() {
	proto.RegisterType((*Space)(nil), "riseandfall.Space")
	proto.RegisterType((*Fleet)(nil), "riseandfall.Fleet")
	proto.RegisterType((*Planet)(nil), "riseandfall.Planet")
	proto.RegisterType((*Empire)(nil), "riseandfall.Empire")
}

func init() { proto.RegisterFile("proto/space.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0x56, 0x7e, 0x77, 0x77, 0xb6, 0x8b, 0xc0, 0x5d, 0x21, 0x2b, 0x82, 0x12, 0xf5, 0x14, 0x2e,
	0x41, 0x6a, 0x25, 0x68, 0xf7, 0x5e, 0x6e, 0xa8, 0xc8, 0xbd, 0xc0, 0x09, 0x85, 0xc4, 0x65, 0x2d,
	0x52, 0xdb, 0x8a, 0xb3, 0x85, 0x7d, 0x25, 0xce, 0x9c, 0x78, 0x24, 0x9e, 0x02, 0xc5, 0x76, 0x76,
	0x1d, 0x91, 0xaa, 0xda, 0x9b, 0x67, 0xfc, 0x7d, 0xf3, 0xf3, 0x79, 0xc6, 0xf0, 0x4c, 0x36, 0xa2,
	0x15, 0x6f, 0x94, 0x2c, 0x4a, 0x9a, 0xeb, 0x33, 0x9a, 0x37, 0x4c, 0xd1, 0x82, 0x57, 0xb7, 0x45,
	0x5d, 0x9f, 0xfe, 0x0d, 0x20, 0xba, 0xe9, 0x2e, 0xd1, 0x25, 0x4c, 0x64, 0x5d, 0x70, 0xda, 0x2a,
	0xec, 0xa5, 0x41, 0x36, 0x3f, 0x7b, 0x95, 0x3b, 0xc0, 0x5c, 0x83, 0xf2, 0x8f, 0x06, 0x71, 0xc5,
	0xdb, 0x66, 0x4b, 0x7a, 0x3c, 0x7a, 0x0b, 0xf1, 0x6d, 0x4d, 0x3b, 0xa6, 0xaf, 0x99, 0x27, 0x23,
	0xcc, 0xf7, 0x1a, 0x60, 0x88, 0x16, 0xdd, 0xa5, 0xa4, 0x77, 0x92, 0x35, 0x54, 0xe1, 0xe0, 0xc1,
	0x94, 0x57, 0x06, 0x61, 0x53, 0x5a, 0x3c, 0x5a, 0x42, 0xf4, 0x83, 0x55, 0xed, 0x1a, 0x87, 0xa9,
	0x97, 0x2d, 0x88, 0x31, 0xd0, 0x73, 0x88, 0xd7, 0x94, 0x7d, 0x5b, 0xb7, 0x38, 0xd2, 0x6e, 0x6b,
	0x75, 0xe8, 0x46, 0x6c, 0x78, 0x85, 0xe3, 0xd4, 0xcb, 0x42, 0x62, 0x8c, 0xe4, 0x1a, 0x8e, 0xdc,
	0x7e, 0xd0, 0x53, 0x08, 0xbe, 0xd3, 0x2d, 0xf6, 0x34, 0xb5, 0x3b, 0xa2, 0xd7, 0x10, 0xdd, 0x17,
	0xf5, 0x86, 0x62, 0x3f, 0xf5, 0xb2, 0xf9, 0xd9, 0xf1, 0xa0, 0x3c, 0xc3, 0x25, 0x06, 0xb1, 0xf2,
	0x2f, 0xbc, 0xe4, 0x03, 0xcc, 0x9d, 0x36, 0x47, 0xe2, 0x65, 0xc3, 0x78, 0x68, 0x10, 0x4f, 0x53,
	0xdd, 0x70, 0xd7, 0x70, 0xe4, 0x36, 0x7f, 0x68, 0x7d, 0x86, 0xeb, 0x04, 0x3c, 0xfd, 0xe5, 0x41,
	0xa4, 0xb3, 0x74, 0x42, 0x19, 0x25, 0x6d, 0x34, 0x6b, 0xa1, 0x73, 0x88, 0xd4, 0x9a, 0xc9, 0xfe,
	0x21, 0x5f, 0xfe, 0x5f, 0x60, 0x7e, 0xd3, 0xdd, 0x9b, 0xd7, 0x30, 0x58, 0x94, 0xc0, 0x54, 0x0a,
	0xc5, 0x5a, 0x26, 0x38, 0x0e, 0x74, 0xb8, 0x9d, 0x9d, 0x5c, 0x00, 0xec, 0x09, 0x23, 0x1d, 0x2c,
	0xdd, 0x0e, 0x42, 0xb7, 0xd8, 0x3f, 0x3e, 0xc4, 0x46, 0x62, 0x84, 0x20, 0xe4, 0xc5, 0x9d, 0xa9,
	0x75, 0x46, 0xf4, 0x19, 0x3d, 0x01, 0x9f, 0x55, 0x9a, 0xb5, 0x20, 0x3e, 0xab, 0xd0, 0x31, 0x44,
	0x52, 0xa8, 0x2f, 0x3f, 0x6d, 0x05, 0xa1, 0x14, 0xea, 0x53, 0xef, 0xdc, 0xda, 0x29, 0xe9, 0x9c,
	0x9f, 0xd1, 0xbb, 0xdd, 0xb4, 0x46, 0x23, 0x43, 0x67, 0x52, 0x8e, 0x8e, 0x2b, 0x86, 0x49, 0x29,
	0x78, 0xdb, 0x88, 0x5a, 0xcf, 0x91, 0x4f, 0x7a, 0xd3, 0x91, 0x73, 0x32, 0x90, 0xf3, 0x05, 0xcc,
	0x4a, 0xc1, 0x39, 0x2d, 0x5b, 0x5a, 0xe1, 0x69, 0x1a, 0x64, 0x0b, 0xb2, 0x77, 0xa0, 0x13, 0x00,
	0xd9, 0x88, 0x6a, 0x53, 0x6a, 0xe5, 0x66, 0x3a, 0xa4, 0xe3, 0x49, 0x2e, 0x1f, 0x1b, 0xa7, 0x81,
	0x78, 0x0b, 0x57, 0xbc, 0xdf, 0x3e, 0xc4, 0xe6, 0xfd, 0xad, 0x50, 0xde, 0x4e, 0x28, 0x0c, 0x13,
	0x59, 0x28, 0xc5, 0xee, 0x0d, 0x6d, 0x4a, 0x7a, 0x13, 0xad, 0xf6, 0x3f, 0x80, 0x59, 0xc7, 0x74,
	0x64, 0x9e, 0x1e, 0xf8, 0x02, 0xf6, 0xa2, 0x86, 0x23, 0xa2, 0x5a, 0xea, 0x98, 0xa8, 0x4b, 0x88,
	0x4a, 0x51, 0x8b, 0x46, 0x6f, 0xec, 0x8c, 0x18, 0x23, 0x59, 0x3d, 0xba, 0x9a, 0x83, 0xde, 0xa7,
	0xee, 0xda, 0x1c, 0x26, 0x9b, 0x4b, 0xfd, 0x1a, 0xeb, 0x1f, 0xf2, 0xfc, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x68, 0xcd, 0xd2, 0xbc, 0x36, 0x05, 0x00, 0x00,
}
